{"version":3,"sources":["components/Form/Form.module.css","components/Contacts/Contacts.module.css","components/Section/Section.module.css","components/Filter/Filter.module.css","components/Section/Section.js","components/Form/Form.js","components/Filter/Filter.js","components/Contacts/Contacts.js","App.js","index.js"],"names":["module","exports","Section","title","children","className","style","section","Form","state","name","number","handleSubmit","e","preventDefault","props","getContact","id","uuidv4","setState","handleNameChange","target","value","this","form","onSubmit","label","input","type","placeholder","onChange","required","btn","Component","Filter","filter","getFilterContact","Contacts","contactList","deleteContact","map","contact","styles","links","onClick","App","contacts","firstContact","originalContact","find","alert","filteredContact","el","toLowerCase","includes","contactId","prev","parsedContacts","JSON","parse","localStorage","getItem","prevProps","prevState","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6c71558.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2EUDc\",\"label\":\"Form_label__3amCs\",\"input\":\"Form_input__1y-iB\",\"btn\":\"Form_btn__2E0pZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"links\":\"Contacts_links__h-p27\",\"btn\":\"Contacts_btn__1_G0p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2mUBJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__340Kr\"};","import PropTypes from \"prop-types\";\nimport style from \"./Section.module.css\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={style.section}>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\nexport default Section;\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport PropTypes from \"prop-types\";\nimport style from \"./Form.module.css\";\n\nexport class Form extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.getContact({ ...this.state, id: uuidv4() });\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  handleNameChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form className={style.form} onSubmit={this.handleSubmit}>\n        <label className={style.label}>\n          Name\n          <input\n            className={style.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"Enter your name\"\n            onChange={this.handleNameChange}\n            required\n          />\n        </label>\n        <label className={style.label}>\n          Number\n          <input\n            className={style.input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            placeholder=\"Enter your number\"\n            onChange={this.handleNameChange}\n            required\n          />\n        </label>\n        <button type=\"submit\" className={style.btn}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  getContact: PropTypes.func,\n};\n\nexport default Form;\n","import PropTypes from \"prop-types\";\nimport style from \"./Filter.module.css\";\n\nconst Filter = ({ filter, getFilterContact }) => (\n  <>\n    <input\n      className={style.filter}\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={getFilterContact}\n      placeholder=\"Enter name to find\"\n    />\n  </>\n);\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  getFilterContact: PropTypes.func,\n};\n\nexport default Filter;\n","import PropTypes from \"prop-types\";\nimport styles from \"./Contacts.module.css\";\n\nconst Contacts = ({ contactList, deleteContact }) => (\n  <ul>\n    {contactList.map((contact) => (\n      <li key={contact.id} className={styles.links}>\n        <p>{contact.name}</p>\n        <p>{contact.number}</p>\n        <button\n          className={styles.btn}\n          type=\"button\"\n          onClick={() => deleteContact(contact.id)} //тут забирается id для передачи в метод удаления у Компонента\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContacts.propTypes = {\n  contactList: PropTypes.arrayOf(PropTypes.object),\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  deleteContact: PropTypes.func,\n};\n\nexport default Contacts;\n","import React, { Component } from \"react\";\nimport Section from \"./components/Section/Section\";\nimport Form from \"./components/Form/Form\";\nimport Filter from \"./components/Filter/Filter\";\nimport Contacts from \"./components/Contacts/Contacts\";\nimport \"./App.css\";\n\nexport class App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n  // 1. объяви state\n  // 2. объяви методы которые этот state изменяют :getContact(),getFilterContact()\n  // 3. передай ссылки на них в обработчики событий в элементе   <Form getContact={this.getContact} />\n  getContact = (firstContact) => {\n    const { contacts } = this.state;\n    const originalContact = contacts.find(\n      (contact) => contact.name === firstContact.name\n    );\n    originalContact\n      ? alert(`${originalContact.name} is already in contacts.`)\n      : this.setState({ contacts: [firstContact, ...contacts] });\n  };\n\n  getFilterContact = (e) => {\n    this.setState({ filter: e.target.value });\n  };\n\n  filteredContact = () => {\n    return this.state.filter\n      ? this.state.contacts.filter((el) =>\n          el.name.toLowerCase().includes(this.state.filter.toLowerCase())\n        )\n      : this.state.contacts;\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((prev) => ({\n      contacts: prev.contacts.filter((contact) => contact.id !== contactId),\n      // берем предидущий массив контактов , фильтруем, и в новый массив собираем лишь те id которых не равен переданому id.\n      // и кидаем в Компонент Контактов ссылку на этот метод, а Компонет передает через пропсы id\n    }));\n  };\n\n  componentDidMount() {\n    const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    // Паттерн : деструктуриация пропов и стейтов в методе рендер\n    const { filter } = this.state;\n    return (\n      <>\n        <Section title=\"Phonebook\">\n          <Form getContact={this.getContact} />\n        </Section>\n        <Section title=\"Contacts\">\n          <Filter filter={filter} getFilterContact={this.getFilterContact} />\n          <Contacts\n            contactList={this.filteredContact()}\n            deleteContact={this.deleteContact}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n// Компоненты пере рендериваются в двух случаях : если в них приходят новые props или изменяются внутреннее состояние(state). при изменинии state каждый раз вызывается метод render()\n\n// функциональные Компоненты(без хуков) пере рендериваются только тогда когда в них приходят новые props\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}